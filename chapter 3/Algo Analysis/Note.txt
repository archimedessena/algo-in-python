Data structure is a systematic way of organizing and accessing
data.

An algorithm is a step-by-step procedure for performing some task in
a finite amount of time.


#Experimental Studies
This function reports the number of seconds, or fractions thereof, that have
elapsed since a benchmark time known as the epoch.

#from time import time
#start time = time( ) # record the starting time
#run algorithm
#end time = time( ) # record the ending time
#elapsed = end time âˆ’ start time # compute the elapsed time



#Challenges of Experimental Analysis
Experimental running times of two algorithms are difficult to directly compare
unless the experiments are performed in the same hardware and software
environments.
â€¢ Experiments can be done only on a limited set of test inputs; hence, they
leave out the running times of inputs not included in the experiment (and
these inputs may be important).
â€¢ An algorithm must be fully implemented in order to execute it to study its
running time experimentally


#Moving Beyond Experimental Analysis
1. Allows us to evaluate the relative efficiency of any two algorithms in a way
that is independent of the hardware and software environment.
2. Is performed by studying a high-level description of the algorithm without
need for implementation.
3. Takes into account all possible inputs


#Counting Primitive Operations
.Assigning an identifier to an object
â€¢ Determining the object associated with an identifier
â€¢ Performing an arithmetic operation (for example, adding two numbers)
â€¢ Comparing two numbers
â€¢ Accessing a single element of a Python list by index
â€¢ Calling a function (excluding operations executed within the function)
â€¢ Returning from a function.

Instead of trying to determine the specific
execution time of each primitive operation, we will simply count how many primitive
operations are executed, and use this number t as a measure of the running
time of the algorithm.


# Worst case requires input size, n but average-case requires probability distribution


#The Seven Functions Used in This Book
1. f(n) = c, called constant function
f(n) = cg(n)

2. The Logarithm Function
f (n) = logb^n, for some constant b > 1.
x = logb^n if and only if b^x = n.
where b is the base and the most common base use in computer science is 2
log2^n = log2^n.

In particular, we can easily compute the smallest integer
greater than or equal to logb n (its so-called ceiling, 
logb^n).

page 138