# FEBRUARY 2, started from page 78
OBJECTIVE ORIENTED PROGRAMMING FROM ALGO IN PYTHON CHAPTER TWO
MODULARITY
Modern software systems typically consist of several different components that
must interact correctly in order for the entire system to work properly.

OR

organizing principle in which different components
of a software system are divided into separate functional units.



Abstraction:The notion of abstraction is to distill a complicated system down to its most funda
mental
parts. or refer to the
collective set of behaviors supported by an ADT as its public interface.


duck typing: is the traditional way in which python handles abstraction



Encapsulation
Different components of a software system should not reveal the internal details of their
respective implementations.

By convention, names of members of a class (both data members
and member functions) that start with a single underscore character (e.g., secret)
are assumed to be nonpublic and should not be relied upon


DESIGN PATTERNS: READ A BOOK ON IT
patterns for solving algorithm design problems
and patterns for solving software engineering problems.


SOFTWARE DEVELOPMENT
Three major steps are:
1. Design
2. Implementation
3. Testing and Debugging

1. DESIGN:
For it is in the design step that we
decide how to divide the workings of our program into classes, we decide how
these classes will interact, what data each will store, and what actions each will
perform.

HOW TO DESIGN A CLASS(RULES)
a. Responsibilities: Divide the work into different actors, each with a different
responsibility. Try to describe responsibilities using action verbs. These
actors will form the classes for the program.

b. Independence: Define the work for each class to be as independent from
other classes as possible.

c. Behaviors: Define the behaviors for each class carefully and precisely, so
that the consequences of each action performed by a class will be well understood
by other classes that interact with it. These behaviors will define
the methods that this class performs, and the set of behaviors for a class are
the interface to the class, as these form the means for other pieces of code to
interact with objects from the class.

#A tool for developing classes is CRC= Class Responsibility Card
A card should represent a component


Classes:

Fields:
_bank
_customer
_account
_balance
_limit

Behaviors:
get_customer()
get_bank()
get_account()
make_payment(amount)
get_balance()
get_limit()
charge(price)

Pseudo-Code: Algo express in normal language for human understanding


Coding Style and Documentation:
a. Python code blocks are typically indented by 4 spaces.
b.Use meaningful names for identifiers.
    i. Classes should have a name that serves as a singular noun, use CamelCase convention if using 
    two or more words
    ii. The name of a function should typically be a verb that describes its affect.
    Note: In line comments are also good for Documentation, 
    Multiline block comments are good for explaining more complex code sections.


DOCSTRING: Python provides integrated support for embedding formal documentation directly
in source code using a mechanism known as a docstring


Testing and Debugging:
Testing: Is the process of experimentally checking the correctness of a program.

Debugging:is the process of tracking the execution of a program and discovering
the errors in it.

Top-down = stubbing
Bottom-up = unit testing


Debugging
The simplest debugging technique consists of using print statements



Class Definitions:
A class also serves as a blueprint for its instances, effectively determining the way
that state information for each instance is represented in the form of attributes (also
known as fields, instance variables, or data members).


Self identifier: Syntactically, self identifies the instance upon which a method is invoked.


Constructor: Its primary responsibility is to establish the state of a newly created credit card object with appropriate instance variables.



#Operator Overloading and Python’s Special Methods
Read more on it later


Polymorphism:literally means  many forms.



#Iterator





#Inheritance
the mechanism for a modular and hierarchical organization
is a technique known as inheritance
OR
A natural way to organize various structural components of a software package
is in a hierarchical fashion, with similar abstract definitions grouped together in
a level-by-level manner that goes from specific to more general as one traverses
up the hierarchy.

Example: The set of a building which is apartment, house, commercial house. The apartment also has a subset, likewise the house and commercial house

The correspondence between levels is often referred
to as an “is a” relationship, as a house is a building, and a ranch is a house.



In object-oriented terminology,
the existing class is typically described as the base class, parent class, or superclass,
while the newly defined class is known as the subclass or child class


There are two ways in which a subclass can differentiate itself from its superclass.
A subclass may specialize an existing behavior by providing a new implementation
that overrides an existing method. A subclass may also extend its
superclass by providing brand new methods. SPECIALIZATION AND EXTENSION


The mechanism
for calling the inherited constructor relies on the syntax, super(). 
example: super().__init__(customer, bank, acnt, limit)


#Protected Members 
names beginning with a single underscore are conventionally akin to protected, while names beginning with a
double underscore (other than special methods) are akin to private

Members that are declared as protected are accessible to subclasses, but not to the general
public, while members that are declared as private are not accessible to either



# Abstract Base Classes
When defining a group of classes as part of an inheritance hierarchy, one technique
for avoiding repetition of code is to design a base class with common functionality
that can be inherited by other classes that need it.
 
OR
In classic object-oriented terminology, we say a class is an abstract base class
if its only purpose is to serve as a base class through inheritance.

More formally, an abstract base class is one that cannot be directly instantiated, while a concrete
class is one that can be instantiated


#Namespaces and Object-Orientation
A namespace is an abstraction that manages all of the identifiers that are defined in
a particular scope, mapping each name to its associated value.


#instance namespace

#class namespace,

#Name Resolution and Dynamic Dispatch  page122

#shallow copy.
#Deep copy.


page 132
